{"version":3,"sources":["App.js","components/ResultComponent.js","components/KeyPadComponent.js","serviceWorker.js","index.js"],"names":["App","onClick","button","calculate","reset","backspace","setState","result","state","checkResult","includes","replace","eval","e","slice","className","this","Component","ResultComponent","props","KeyPadComponent","name","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f1d8e439.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './components/App.css';\r\nimport ResultComponent from './components/ResultComponent';\r\nimport KeyPadComponent from \"./components/KeyPadComponent\";\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            result: \"\"\r\n        }\r\n    }\r\n\r\n    onClick = button => {\r\n\r\n        if(button === \"=\"){\r\n            this.calculate()\r\n        }\r\n\r\n        else if(button === \"C\"){\r\n            this.reset()\r\n        }\r\n        else if(button === \"CE\"){\r\n            this.backspace()\r\n        }\r\n\r\n        else {\r\n            this.setState({\r\n                result: this.state.result + button\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n    calculate = () => {\r\n        var checkResult = ''\r\n        if(this.state.result.includes('--')){\r\n            checkResult = this.state.result.replace('--','+')\r\n        }\r\n\r\n        else {\r\n            checkResult = this.state.result\r\n        }\r\n\r\n        try {\r\n            this.setState({\r\n                // eslint-disable-next-line\r\n                result: (eval(checkResult) || \"\" ) + \"\"\r\n            })\r\n        } catch (e) {\r\n            this.setState({\r\n                result: \"error\"\r\n            })\r\n\r\n        }\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({\r\n            result: \"\"\r\n        })\r\n    };\r\n\r\n    backspace = () => {\r\n        this.setState({\r\n            result: this.state.result.slice(0, -1)\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div> \r\n                <div className=\"calculator-body\">\r\n                    <h1>Calculator</h1>\r\n                    <ResultComponent result={this.state.result}/>\r\n                    <KeyPadComponent onClick={this.onClick}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\n\r\nclass ResultComponent extends Component {\r\n\r\n    render() {\r\n        let {result} = this.props;\r\n        return (\r\n            <div className=\"result\">\r\n                <p>{result}</p>\r\n            </div>\r\n    )\r\n        ;\r\n    }\r\n}\r\n\r\n\r\nexport default ResultComponent;\r\n\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\n\r\nclass KeyPadComponent extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"button\">\r\n                <button className=\"butt1\" name=\"(\" onClick={e => this.props.onClick(e.target.name)}>(</button>\r\n                <button className=\"butt1\" name=\"CE\" onClick={e => this.props.onClick(e.target.name)}>CE</button>\r\n                <button className=\"butt1\" name=\")\" onClick={e => this.props.onClick(e.target.name)}>)</button>\r\n                <button className=\"butt1\" name=\"C\" onClick={e => this.props.onClick(e.target.name)}>C</button><br/>\r\n\r\n\r\n                <button className=\"butt\" name=\"1\" onClick={e => this.props.onClick(e.target.name)}>1</button>\r\n                <button className=\"butt\" name=\"2\" onClick={e => this.props.onClick(e.target.name)}>2</button>\r\n                <button className=\"butt\" name=\"3\" onClick={e => this.props.onClick(e.target.name)}>3</button>\r\n                <button className=\"butt1\" name=\"+\" onClick={e => this.props.onClick(e.target.name)}>+</button><br/>\r\n\r\n\r\n                <button className=\"butt\" name=\"4\" onClick={e => this.props.onClick(e.target.name)}>4</button>\r\n                <button className=\"butt\" name=\"5\" onClick={e => this.props.onClick(e.target.name)}>5</button>\r\n                <button className=\"butt\" name=\"6\" onClick={e => this.props.onClick(e.target.name)}>6</button>\r\n                <button className=\"butt1\" name=\"-\" onClick={e => this.props.onClick(e.target.name)}>-</button><br/>\r\n\r\n                <button className=\"butt\" name=\"7\" onClick={e => this.props.onClick(e.target.name)}>7</button>\r\n                <button className=\"butt\" name=\"8\" onClick={e => this.props.onClick(e.target.name)}>8</button>\r\n                <button className=\"butt\" name=\"9\" onClick={e => this.props.onClick(e.target.name)}>9</button>\r\n                <button className=\"butt1\" name=\"*\" onClick={e => this.props.onClick(e.target.name)}>x</button><br/>\r\n\r\n\r\n                <button className=\"butt\" name=\".\" onClick={e => this.props.onClick(e.target.name)}>.</button>\r\n                <button className=\"butt\" name=\"0\" onClick={e => this.props.onClick(e.target.name)}>0</button>\r\n                <button className=\"butt\" name=\"=\" onClick={e => this.props.onClick(e.target.name)}>=</button>\r\n                <button className=\"butt1\" name=\"/\" onClick={e => this.props.onClick(e.target.name)}>รท</button><br/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default KeyPadComponent;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}